Inner Class interview questions
https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html

1. Why use nested classes?
   https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html 
	It's a way of logically grouping classes that are only used in one place: 
		If a class is useful to only one other class, then it's logical to embed it in that class and keep the two together.
		Nesting such "helpe class" makes their package more streamlined.
	It increases encapsulation:
		Consider two top-level classes, A and B, where B needs access to members of A that would otherwise be declared private.
		By hiding class B within class A, A's members can be declared private and B can access them, in addition, B itself can be hidden from the outside the world
	It can lead to more readable and maintainable code:
		Nesting small classes within top-level classes places the code closer to where it is used

2. What's static nested class?
	As with class methods and variables, a static nested class is associated with its outer class. And like static class method, a static nested class can not refer directly 
	to instance variables or methods defined in its enclosing class: it can use them only through an object reference.
    Static nested classes are accessed using the enclosing class name:
    	OutClass.StaticNestedClass
    	OuterClass.StaticNestedClass nestedObject = new OuterClass.StaticNestedClass();

3. What's inner class?
	As with instance methods and variables, an inner class is associated with an instance of its enclosing class and has direct access to that object's methods and fields.
	Also, because an inner class is associated with an instance, it can not define any static members itself.
	An instance of InnerClass can exit only within an instance of OuterClass and has direct access to the methods and fields of it's enclosing instance.
	to instantiate an inner class, you must first instantiate the outer class. Then, create the inner object with the outer object with this syntax
	class OuterClass {
	...
		class InnerClass {
			...
		}
	}
	
	OuterClass.InnerClass innerObject = outerObject.new InnerClass();
	
	https://dzone.com/articles/what-are-nested-classes-and