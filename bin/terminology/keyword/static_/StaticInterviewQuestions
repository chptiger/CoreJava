static interview questions
1. Compile time polymorphism vs Run time polymorphism?
	Overloading vs Overriding
	Overloading is allowed in static method.
	Overriding is not allowed in static method.

2. Java doesn't allow you to create top-level(non-nested) static classes, so static classes will always be nested.

3. Why use nested classes?
   https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html 
	It's a way of logically grouping classes that are only used in one place: 
		If a class is useful to only one other class, then it's logical to embed it in that class and keep the two together.
		Nesting such "helpe class" makes their package more streamlined.
	It increases encapsulation:
		Consider two top-level classes, A and B, where B needs access to members of A that would otherwise be declared private.
		By hiding class B within class A, A's members can be declared private and B can access them, in addition, B itself can be hidden from the outside the world
	It can lead to more readable and maintainable code:
		Nesting small classes within top-level classes places the code closer to where it is used

4. What's static nested class?
	As with class methods and variables, a static nested class is associated with its outer class. And like static class method, a static nested class can not refer directly 
	to instance variables or methods defined in its enclosing class: it can use them only through an object reference.
    Static nested classes are accessed using the enclosing class name:
    	OutClass.StaticNestedClass
    	OuterClass.StaticNestedClass nestedObject = new OuterClass.StaticNestedClass();

5. What's inner class?
	As with instance methods and variables, an inner class is associated with an instance of its enclosing class and has direct access to that object's methods and fields.
	Also, because an inner class is associated with an instance, it can not define any static members itself.
	An instance of InnerClass can exit only within an instance of OuterClass and has direct access to the methods and fields of it's enclosing instance.
	to instantiate an inner class, you must first instantiate the outer class. Then, create the inner object with the outer object with this syntax
	class OuterClass {
	...
		class InnerClass {
			...
		}
	}
	
	OuterClass.InnerClass innerObject = outerObject.new InnerClass();
	
6. What are the differences between static and non-static nested classes?
   1) Nested static class doesn't need reference of Outer class, but non-static nested class or inner class requires outer class reference
   2) Inner class can access both static and non-static members of outer class. A static class can not access non-static members of the outer class. It can access only static members of outer class
   3) An instance of inner class can not be created without an instance of outer class and an inner class can reference data and methods defined in outer class in which it nests,
      so we don't need to pass reference of an object to the constructor of the inner class. For this reason inner classes can make program simple and concise.
      
 7. Why main() method is delcared as static?
 	If our main() method is not declared as tatic then the JVM has to create object first and call which causes the problem of having extra memory allocation
 	
 8. Can constructors be static in java?
 	In general a static method means that "The method belong to class and not to any particular object" but a constructor is always invoked with respect to an object, so it makes no sense for a constructor to be static.
 	
 9.	Why abstract method can not be static in Java?
 	abstract method should not have implementation. We could call static method by ClassName.StaticMethomd.
 	Making abstract method static would make it possible to call an undefined method which is of no use. hence it is not allowed.
 
 10. Can interface in java have static method in it?
 	No, interface can not have static method in it because all methods are implicitly abstract. This is why interface can not have static method.
 	
 11. Can abstract class have static variable in it?
 	Yes
 
 12. non-static method can not be referenced from a static context?
 	yes.
 	static methods belongs to the class, non-static methods belong to instance of the class and hence it throws the error "non-static method can not be referenced from a static context"
 	
 	        